from sklearn.ensemble import RandomForestClassifier
from sklearn.feature_selection import RFE
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
import pandas as pd
from sklearn.model_selection import train_test_split

# Load the data
df = pd.read_csv('ClaMP_Integrated-5184.csv')

# Convert categorical columns to numerical values
# using label encoding
label_encoders = {}
for column in df.select_dtypes(include=['object']).columns:
    le = LabelEncoder()
    df[column] = le.fit_transform(df[column])
    label_encoders[column] = le

# Define features (X) and target (y)
X = df.drop(columns=['class'])
y = df['class']

# Handle missing values by filling them with column means
X = X.fillna(X.mean())

# Standardize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Create a Random Forest Classifier
clf = RandomForestClassifier()

# Use RFE for feature selection, keeping 10 features
selector = RFE(estimator=clf, n_features_to_select=10)
selector = selector.fit(X_scaled, y)

# Print the selected features
selected_features = X.columns[selector.support_]
print("Selected features:")
for feature in selected_features:
    print(feature)

# Split the dataset into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Train a Decision Tree Classifier (J48)
j48 = DecisionTreeClassifier()
j48.fit(X_train, y_train)
j48_score = j48.score(X_test, y_test)
print(f"\nAccuracy of J48 decision tree: {j48_score:.4f}")

# Train a Support Vector Machine (SVM)
svm = SVC()
svm.fit(X_train, y_train)
svm_score = svm.score(X_test, y_test)
print(f"Accuracy of Support Vector Machine: {svm_score:.4f}")

# Indicate completion
print("\nTransformation and Training complete!")
